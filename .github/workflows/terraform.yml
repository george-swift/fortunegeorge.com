name: Deploy to S3

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.BUCKET_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        run: terraform init

      - name: Check Terraform State Lock
        run: |
          set -e
          if terraform state pull >/dev/null 2>&1; then
            echo "Terraform state accessible."
          else
            echo "Terraform state is locked or unavailable."
            exit 1
          fi

      - name: Unlock Terraform State (If Necessary)
        run: |
          LOCK_ID=$(terraform force-unlock -force 2>&1 | grep -oP '(?<=Lock info: ).*' || true)
          if [ -n "$LOCK_ID" ]; then
            echo "Force unlocking Terraform state with ID: $LOCK_ID"
            terraform force-unlock $LOCK_ID
          fi

      - name: Validate Terraform
        run: terraform validate

      - name: Plan Terraform
        run: terraform plan -out=tfplan
        env:
          TF_VAR_root_domain_bucket_name: ${{ vars.ROOT_DOMAIN_BUCKET_NAME }}
          TF_VAR_sub_domain_bucket_name: ${{ vars.SUB_DOMAIN_BUCKET_NAME }}
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
          TF_VAR_bucket_region: ${{ vars.BUCKET_REGION }}

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_root_domain_bucket_name: ${{ vars.ROOT_DOMAIN_BUCKET_NAME }}
          TF_VAR_sub_domain_bucket_name: ${{ vars.SUB_DOMAIN_BUCKET_NAME }}
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
          TF_VAR_bucket_region: ${{ vars.BUCKET_REGION }}

      - name: Invalidate CloudFront Cache (Root Domain)
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_ROOT_DISTRIBUTION_ID }} --paths "/*"

      - name: Invalidate CloudFront Cache (Subdomain)
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_WWW_DISTRIBUTION_ID }} --paths "/*"
